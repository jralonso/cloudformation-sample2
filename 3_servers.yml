Description: >
  Juan Ramon Alonso / Udacity DevOps Cloud
  Project 2 Infraestructure as code using Cloudformation
  Web Servers

Parameters:
  EnvironmentName: 
    Description: An environment name to be prefixed to all resources
    Type: String

  WebServerAMI: 
    Description: Web Server AMI
    Type: String
    Default: ami-005bdb005fb00e791

  WebServerInstanceType: 
    Description: Web server instance type
    Type: String
    Default: t3.small
  
  KeyPair: 
    Description: Key pair to lo in from Bastion
    Type: String
  
  WebServerVolumeSize: 
    Description: Web server root disk capacity
    Type: Number
    Default: "10"
  
  MaxWebServers: 
    Description: Max number of web servers
    Type: Number  
    Default: "2"

  MinWebServers: 
    Description: Minimum number of web servers
    Type: Number  
    Default: "2"

  VPCId: 
    Description: Identifier of the VPC
    Type: String

  PubSubnet1Id: 
    Description: Load Balancer Public Subnet 1
    Type: String

  PubSubnet2Id:  
    Description: Load Balancer Public Subnet 1
    Type: String

  PrivSubnetsIds:  
    Description: Web Servers private subnets
    Type: String

  BastionSG:
    Description: Security group of bastion host
    Type: String

Resources:

  # Security groups
  ALBsecgrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to our load balancer
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
      # From ALB to VPC only HTTP traffic is allowed
      SecurityGroupEgress:
         - IpProtocol: tcp
           FromPort: 80
           ToPort: 80
           CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for HTTP LB

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: ALBsecgrp
    Properties:
      GroupDescription: Allow HTTP traffic to our Web server and SSH from our Bastion environment
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Sub ${ALBsecgrp.GroupId}
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
      # From the web server all connections to external servers are allowed so it can download and update software (will do it via NAT)  
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for HTTP and local SSH Web Server

  # IAM Role for S3 access
  IAMRoleS3Access:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole

  IAMWebInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref IAMRoleS3Access
    
  # Launch configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref WebServerAMI
      KeyName: !Ref KeyPair
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: !Ref WebServerInstanceType # General use: 2core + 4GB RAM
      IamInstanceProfile: !Ref IAMWebInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref WebServerVolumeSize

  #Auto scaling group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref PrivSubnetsIds
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MaxSize: !Ref MaxWebServers
      MinSize: !Ref MinWebServers
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
          PropagateAtLaunch: True

  # Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PubSubnet1Id
        - !Ref PubSubnet2Id
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      SecurityGroups:
        - Ref: ALBsecgrp

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions: #required
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1
  
  # Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Name: WebServers
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
        - Key: Name
          Value: !Sub ${EnvironmentName}-TG-WebServers
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPCId

Outputs:

  BalancerDNS:
    Description: ALP DNS address
    Value: !Sub
      - http://${ALBaddr}
      - { ALBaddr: !GetAtt WebAppLB.DNSName }
    Export:
      Name: !Sub ${EnvironmentName}-ALB-addr
  