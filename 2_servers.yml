Description: >
  Juan Ramon Alonso / Tomcat Docker Backend
  This is a template using YAML

Parameters:
  EnvironmentName: 
    Description: An environment name to be prefixed to all resources
    Type: String  
  MyLocalIPAddressCIDR: 
    Description: Local IP Address
    Type: String
  BucketName:
    Description: Bucket with seed files
    Type: String
  JiraHomeBackupFile:
    Description: Jira Home backup file
    Type: String

Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to our load balancer
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for HTTP LB

  # BAckend Server Security Group
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to our Web server and SSH from Bastion Host in VPC
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
          # Rule for Tomcat Application
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0 
          # Rule for Bastion host
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for HTTP and local SSH Web Server
  
  # Bastion host security group
  BastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH traffic to our Bastion Host from our local environment
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
          # Rule for Bastion host
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyLocalIPAddressCIDR
        - IpProtocol: icmp  
          FromPort: -1  
          ToPort: -1  
          CidrIp: !Ref MyLocalIPAddressCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for SSH Bastion Host

  # IAM 
  IAMRoleAccessEC2FromBastionHost:
    Type: AWS::IAM::Role
    Properties: 
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /  
      AssumeRolePolicyDocument:  
        Version: '2012-10-17'
        Statement:
          - Effect: Allow  
            Principal:  
              Service:  
              - ec2.amazonaws.com  
            Action:  
              - sts:AssumeRole
  
  IAMRoleBastionHostInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref IAMRoleAccessEC2FromBastionHost
        - !Ref IAMRoleS3Access
  
  # IAM Role for S3 access
  IAMRoleS3Access:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole

  IAMWebInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref IAMRoleS3Access

  # Bastion Host
  BastionHost:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication: 
        S3AccessCreds: 
          type: S3
          buckets: 
            - !Ref BucketName
          roleName: !Ref IAMWebInstanceProfile
    Properties:
      KeyName: udacityTestEC2
      ImageId: ami-04590e7389a6e577c
      InstanceType: t2.micro
      IamInstanceProfile: !Ref IAMRoleBastionHostInstanceProfile
      SecurityGroupIds:
        - Ref: BastionSecGroup
      SubnetId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      UserData: !Base64 |
        #!/bin/bash -ex
        # Send user data logs to a file
        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
        # Install mysql
        # Documentation: https://dev.mysql.com/doc/mysql-repo-excerpt/5.7/en/linux-installation-yum-repo.html
        sudo yum install -y https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm          
        sudo yum install -y mysql-community-client

      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host
    
  # Launch configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install docker
          # Update apt package index
          sudo apt-get update          
          # Install the requirements for docker
          # Add DEBIAN_FRONTEND=noninteractive to avoid interactive apt-get questions (things that -y does not prevent)
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          # Add Docker's GPG key
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          # Use the following command to set up the stable repository
          sudo add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu  \
          $(lsb_release -cs) \
          stable"
          # Update the apt package index.
          sudo apt-get update
          # Install the latest version of Docker Engine - Community and containerd, 
          # add -y flag to install unattended
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          # Add the user to the supplementary group(s)
          sudo usermod -aG docker ubuntu
          # Create volumes and mount points
          # mount points for future named volumes
          sudo mkdir /var/lib/docker/volumes/jiradata_volume
          sudo mkdir /var/lib/docker/volumes/jiralogs_volume
          sudo mkdir /var/lib/docker/volumes/tomcatlogs_volume
          # format volumes
          sudo mkfs -t ext4 /dev/sdf
          sudo mkfs -t ext4 /dev/sdg
          sudo mkfs -t ext4 /dev/sdh
          # Mount host volumes
          sudo mount /dev/sdf /var/lib/docker/volumes/jiradata_volume
          sudo mount /dev/sdg /var/lib/docker/volumes/jiralogs_volume
          sudo mount /dev/sdh /var/lib/docker/volumes/tomcatlogs_volume
          # Create named Volumes
          docker volume create --name jiradata_volume
          docker volume create --name jiralogs_volume
          docker volume create --name tomcatlogs_volume
          # Run detached Tomcat server in 8080 
          sudo docker run \
          -v jiradata_volume:/var/atlassian/application-data/jira \
          -v jiralogs_volume:/var/atlassian/application-data/jira/logs \
          -v tomcatlogs_volume:/opt/atlassian/jira/logs/ \
          -name="jira" -d -p 8080:8080 atlassian/jira-software
      # Ubuntu, 18.04 LTS (user ubuntu)     
      ImageId: ami-005bdb005fb00e791
      # IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      KeyName: udacityTestEC2
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      IamInstanceProfile: !Ref IAMWebInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs: 
            VolumeSize: 200
            VolumeType: gp2
        - DeviceName: /dev/sdg
          Ebs: 
            VolumeSize: 20
            VolumeType: gp2
        - DeviceName: /dev/sdh
          Ebs: 
            VolumeSize: 20
            VolumeType: gp2    

  #Auto scaling group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MaxSize: 2
      MinSize: 1
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
          PropagateAtLaunch: True

  # Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions: #required
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1
  
  # Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Name: String
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"