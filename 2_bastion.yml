Description: >
  Juan Ramon Alonso / Udacity DevOps Cloud
  Project 2 Infraestructure as code using Cloudformation
  Bastion 
  
Parameters:
  
  EnvironmentName: 
    Description: An environment name to be prefixed to all resources
    Type: String

  MylocalIP: 
    Description: My local IP
    Type: String

  BastionInstanceType:
    Description: AWS instance type for Bastion hosts
    Type: String
    Default: t2.micro

  BastionAMI:
    Description: AWS AMI to use for Bastion hosts
    Type: String
    Default: ami-0e8c04af2729ff1bb

  VPCId: 
    Description: Identifier of the VPC
    Type: String
  
  PubSubnet1Id: 
    Description: Bastion 1 Public subnet
    Type: String

  PubSubnet2Id:  
    Description: Bastion 2 Public subnet
    Type: String

Resources:
  # Bastion Host
  # Security group to allow SSH access
  BastionHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and PING ingress and all traffic from Bastion Host to Internet
      VpcId: !Ref VPCId
      SecurityGroupIngress:
          # Rule for Bastion host
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MylocalIP
        - IpProtocol: icmp  
          FromPort: -1  
          ToPort: -1  
          CidrIp: !Ref MylocalIP          
      SecurityGroupEgress:
          # ALL egress ports allowed everywhere
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for SSH Bastion Host
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  BastionHostAZ1:
   Type: AWS::EC2::Instance
   Properties:
      ImageId:  !Ref BastionAMI
      InstanceType: !Ref BastionInstanceType
      IamInstanceProfile: !Ref IAMRoleSSMBastionHostInstanceProfile
      SecurityGroupIds:
       - !Ref BastionHostSecGroup
      SubnetId: !Ref PubSubnet1Id
      UserData: 
       Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum install -y python3-pip python3 python3-setuptools
          # Download get-pip to current directory. It won't install anything, as of now
          curl -O https://bootstrap.pypa.io/get-pip.py
          # Use python3.6 to install pip
          python3 get-pip.py
          # this will install pip3 and pip3.
          # install AWS EC2 Instance Connect CLI
          pip install ec2instanceconnectcli
          # install jq to deal with JSON
          yum install -y jq
          # Build the profile to connect to Web Servers
          cd /home/ec2-user
          mkdir .aws
          echo "[default]" > .aws/credentials
          chown ec2-user:ec2-user .aws/credentials
          echo "aws_secret_access_key=`aws ssm get-parameter --name "user_aws_secret_access_key" --region us-west-2 | jq -r '.Parameter.Value'`" >> .aws/credentials
          echo "aws_access_key_id=`aws ssm get-parameter --name "user_aws_access_key_id" --region us-west-2 | jq -r '.Parameter.Value'`" >> .aws/credentials
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host AZ1
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  BastionHostAZ2:
   Type: AWS::EC2::Instance
   Properties:
      ImageId: !Ref BastionAMI 
      InstanceType: !Ref BastionInstanceType
      IamInstanceProfile: !Ref IAMRoleSSMBastionHostInstanceProfile
      SecurityGroupIds:
       - !Ref BastionHostSecGroup
      SubnetId: !Ref PubSubnet2Id
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum install -y python3-pip python3 python3-setuptools
          # Download get-pip to current directory. It won't install anything, as of now
          curl -O https://bootstrap.pypa.io/get-pip.py
          # Use python3.6 to install pip
          python3 get-pip.py
          # this will install pip3 and pip3.
          # install AWS EC2 Instance Connect CLI
          pip install ec2instanceconnectcli
          # install jq to deal with JSON
          yum install -y jq
          # Build the profile to connect to Web Servers
          cd /home/ec2-user
          mkdir .aws
          echo "[default]" > .aws/credentials
          chown ec2-user:ec2-user .aws/credentials
          echo "aws_secret_access_key=`aws ssm get-parameter --name "user_aws_secret_access_key" --region us-west-2 | jq -r '.Parameter.Value'`" >> .aws/credentials
          echo "aws_access_key_id=`aws ssm get-parameter --name "user_aws_access_key_id" --region us-west-2 | jq -r '.Parameter.Value'`" >> .aws/credentials
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host AZ2
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  # Bastion policies and roles 
  IAMRoleAccessSSMFromBastionHost:
    Type: AWS::IAM::Role
    Properties: 
      # Utility policies for Bastion
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Path: /  
      AssumeRolePolicyDocument:  
        Version: '2012-10-17'
        Statement:
          - Effect: Allow  
            Principal:  
              Service:  
              - ec2.amazonaws.com  
            Action:  
              - sts:AssumeRole
  
  AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-AccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource: 
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
      Roles:
        - !Ref IAMRoleAccessSSMFromBastionHost

  AccessParametersPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-AccessParametersPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: 
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/user_aws_*
      Roles:
        - !Ref IAMRoleAccessSSMFromBastionHost

  IAMRoleSSMBastionHostInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref IAMRoleAccessSSMFromBastionHost

Outputs:

  BastionAZ1Id:
    Description: BastionHost AZ1 instance id
    Value: !Ref BastionHostAZ1
    Export: 
      Name: !Sub ${EnvironmentName}-Bastion-AZ1-instanceId      

  BastionAZ2Id:
    Description: BastionHost AZ2 instance id
    Value: !Ref BastionHostAZ2
    Export: 
      Name: !Sub ${EnvironmentName}-Bastion-AZ2-instanceId

  BastionAZ1addr:
    Description: BastionHost AZ1 address
    Value: !GetAtt BastionHostAZ1.PublicDnsName
    Export: 
      Name: !Sub ${EnvironmentName}-Bastion-AZ1-DNS      

  BastionAZ2addr:
    Description: BastionHost AZ2 address
    Value: !GetAtt BastionHostAZ2.PublicDnsName
    Export: 
      Name: !Sub ${EnvironmentName}-Bastion-AZ2-DNS

  BastionSecGrp:
    Description: Reference to the security group used by Bastion
    Value: !Ref BastionHostSecGroup
    Export: 
      Name: !Sub ${EnvironmentName}-SG-BastionHostSecGroup