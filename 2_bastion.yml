Description: >
  Juan Ramon Alonso / Udacity DevOps Cloud
  Project 2 Infraestructure as code using Cloudformation
  Bastion 
  
Parameters:
  
  EnvironmentName: 
    Description: An environment name to be prefixed to all resources
    Type: String

  MylocalIP: 
    Description: My local IP
    Type: String

  BastionInstanceType:
    Description: AWS instance type for Bastion hosts
    Type: String
    Default: t2.micro

  BastionAMI:
    Description: AWS AMI to use for Bastion hosts
    Type: String
    Default: ami-0e8c04af2729ff1bb

  KeyPair:
    Description: KeyPair file used to access the Bastion hosts
    Type: String

Resources:
  # Bastion Host
  # Security group to allow SSH access
  BastionHostSecGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and PING ingress and all traffic from Bastion Host to Internet
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
          # Rule for Bastion host
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MylocalIP
        - IpProtocol: icmp  
          FromPort: -1  
          ToPort: -1  
          CidrIp: !Ref MylocalIP          
      SecurityGroupEgress:
          # ALL egress ports allowed everywhere
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for SSH Bastion Host 2
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  # A second Security group will allow us to prevent access from bastion in public subnet 1 to hosts in private subnet2
  BastionHostSecGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and PING ingress and all traffic from Bastion Host to Internet
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
          # Rule for Bastion host
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MylocalIP
        - IpProtocol: icmp  
          FromPort: -1  
          ToPort: -1  
          CidrIp: !Ref MylocalIP          
      SecurityGroupEgress:
          # ALL egress ports allowed everywhere
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SecGrp for SSH Bastion Host 2
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  BastionHostAZ1:
   Type: AWS::EC2::Instance
   Properties:
      KeyName: !Ref KeyPair
      ImageId:  !Ref BastionAMI
      InstanceType: !Ref BastionInstanceType
      IamInstanceProfile: !Ref IAMRoleSSMBastionHostInstanceProfile
      SecurityGroupIds:
       - !Ref BastionHostSecGroup1
      SubnetId: 
       Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-AZ1"
      UserData: 
       Fn::Base64: !Sub |
         #!/bin/bash -ex
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host AZ1
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  BastionHostAZ2:
   Type: AWS::EC2::Instance
   Properties:
      KeyName: !Ref KeyPair
      ImageId: !Ref BastionAMI 
      InstanceType: !Ref BastionInstanceType
      IamInstanceProfile: !Ref IAMRoleSSMBastionHostInstanceProfile
      SecurityGroupIds:
       - !Ref BastionHostSecGroup2
      SubnetId: 
       Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-AZ2"
      UserData: 
       Fn::Base64: !Sub |
         #!/bin/bash -ex
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host AZ2
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  # Bastion policies and roles 
  IAMRoleAccessSSMFromBastionHost:
    Type: AWS::IAM::Role
    Properties: 
      # Utility policies for Bastion
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Path: /  
      AssumeRolePolicyDocument:  
        Version: '2012-10-17'
        Statement:
          - Effect: Allow  
            Principal:  
              Service:  
              - ec2.amazonaws.com  
            Action:  
              - sts:AssumeRole
  
  IAMRoleSSMBastionHostInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref IAMRoleAccessSSMFromBastionHost

Outputs:

  BastionAZ1addr:
    Description: BastionHost AZ1 address
    Value: !GetAtt BastionHostAZ1.PublicDnsName
    Export: 
      Name: !Sub ${EnvironmentName}-Bastion-AZ1-DNS

  BastionAZ2addr:
    Description: BastionHost AZ2 address
    Value: !GetAtt BastionHostAZ2.PublicDnsName
    Export: 
      Name: !Sub ${EnvironmentName}-Bastion-AZ2-DNS

  BastionSecGrp1:
    Description: Reference to the security group used by Bastion
    Value: !Ref BastionHostSecGroup1
    Export: 
      Name: !Sub ${EnvironmentName}-SG-BastionHostSecGroup1

  BastionSecGrp2:
    Description: Reference to the security group used by Bastion
    Value: !Ref BastionHostSecGroup2
    Export: 
      Name: !Sub ${EnvironmentName}-SG-BastionHostSecGroup2