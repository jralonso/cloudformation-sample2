Description: |
  Juan Ramon Alonso / Udacity DevOps Cloud
  Project 2 Infraestructure as code using Cloudformation
  Network infraestructure

Parameters:
  EnvironmentName:
    Description: An environment name to be prefixed to all resources
    Type: String

Resources:

  # #############################################
  # Section Network
  # #############################################

  #VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      # We want VPC to provide DNS names for our instances
      EnableDnsHostnames: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  
  #Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
            
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: myVPC
      InternetGatewayId: 
        Ref: InternetGateway

  # Public Subnets
  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: "10.0.10.0/24"
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: "10.0.20.0/24"
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  
  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: "10.0.100.0/24"
      MapPublicIpOnLaunch: false  
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: "10.0.200.0/24"
      MapPublicIpOnLaunch: false  
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name 
          Value: !Sub ${EnvironmentName} Privat Subnet (AZ2)

  # #######################################
  # Section NAT Gateways
  # #######################################
  
  # First get 2 Elastic IPs for the NAT GWs
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc          

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc          

  # NAt GW 1 in Public Subnet 1
  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Nat Gateway for private subnet (AZ1)

  # NAt GW 2 in Public Subnet 1
  NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Nat Gateway for private subnet (AZ2)
  
  # #######################################
  # Section Routing
  # #######################################

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public routes

  # Route ALL traffic to the IGW and add this Route to the Public Route table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach Route Table to Subnets in AZ1 and AZ1
  # So ALL traffic to internet is sent to IGW
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Routing Table for private subnet 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private routes (AZ1)

  # For Private Subnets ALL traffic to internet is sent to the NAT GW
  # The NAT GW for Private Subnet 1 will be in Public Subnet 1
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # RouteTable to Subnet Association
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateRouteTable1
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  # Routing Private Subnet 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private routes (AZ2)

  # Route for Private Subnet 2. 
  # Send ALL traffic to internet via NAT GW 2 (in Public subnet 2)
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateRouteTable2
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
      
Outputs:

  VPC:
    Description: Reference to the VPC used in the script
    Value: !Ref myVPC
    Export: 
      Name: !Sub ${EnvironmentName}-VPCID

  VPCPublicRoute:
    Description: Public routing
    Value: !Ref PublicRouteTable
    Export: 
      Name: !Sub ${EnvironmentName}-PUB-RT

  VPCPrivateRouteTable1:
    Description: Private routing table 1
    Value: !Ref PrivateRouteTable1
    Export: 
      Name: !Sub ${EnvironmentName}-PRIV1-RT

  VPCPrivateRouteTable2:
    Description: Private routing table 2
    Value: !Ref PrivateRouteTable2
    Export: 
      Name: !Sub ${EnvironmentName}-PRIV2-RT

  VPCPublicSubnets:
    Description: List of public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export: 
      Name: !Sub ${EnvironmentName}-PUB-SUBNETS

  VPCPrivateSubnets:
    Description: List of private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export: 
      Name: !Sub ${EnvironmentName}-PRIV-SUBNETS

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUB-SN-AZ1

  PublicSubnet2: 
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB-SN-AZ2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-SN-AZ1

  PrivateSubnet2: 
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-SN-AZ2